// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  displayName String
  email String @unique
  password String
  profileImage String?
  backgroundImage String?
  bio String?
  viewCount Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]
  savedPosts SavedPost[]
  viewedPosts UserViewedPost[]
  comments Comment[]
  replyToUser Comment[] @relation("ReplyToUser")
  followers UserSubscription[] @relation("UserSubscriptions")
  followings UserSubscription[] @relation("FollowedBy")
  categoriesSubscription CategorySubscription[]
  searchHistories SearchHistory[]

  @@map("user")
}

model Post{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  preview String
  content String
  imagePath String?
  authorId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  views Int @default(0)

  author User @relation(fields: [authorId], references: [id])

  viewedPosts UserViewedPost[]
  postCategories CategoriesOnPosts[]
  comments Comment[]
  savedPosts SavedPost[]
  
  @@map("post")
}

model Category{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  postCategories CategoriesOnPosts[]
  categoriesSubscription CategorySubscription[]

  @@map("category")
}

// mongodb doesnt support compound keys
model CategoriesOnPosts {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId
  categoryId String @db.ObjectId
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@map("categories_on_posts")
  @@unique([postId, categoryId])
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  postId String @db.ObjectId
  userId String @db.ObjectId
  parentId String? @db.ObjectId
  replyToUserId String? @db.ObjectId
  createdAt DateTime @default(now())

  post Post @relation(fields:[postId], references: [id])
  user User @relation(fields:[userId], references: [id])
  replyToUser User? @relation("ReplyToUser", fields:[replyToUserId], references: [id])

  @@index([parentId])
  @@map("comment")
}

//follow
model UserSubscription {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  authorId String @db.ObjectId
  createdAt DateTime @default(now())

  author User @relation("UserSubscriptions",fields:[authorId], references: [id])
  user User @relation("FollowedBy",fields:[userId], references: [id])

  @@unique([userId, authorId])
  @@map("users_follow_users")
}

model CategorySubscription {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  categoryId String @db.ObjectId
  createdAt DateTime @default(now())

  category Category @relation(fields:[categoryId], references: [id])
  user User @relation(fields:[userId], references: [id])

  @@unique([userId, categoryId])
  @@map("users_follow_categories")
}

model SavedPost {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  postId String @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields:[userId], references: [id])
  post Post @relation(fields:[postId], references: [id])

  @@unique([userId, postId])
  @@map("saved_post")
}

//for recommendation
model UserViewedPost {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  postId String @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields:[userId], references: [id])
  post Post @relation(fields:[postId], references: [id])

  @@map("user_viewed_post")
}

model SearchHistory {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  query String
  userId String @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields:[userId], references: [id])
  @@map("search_history")
}